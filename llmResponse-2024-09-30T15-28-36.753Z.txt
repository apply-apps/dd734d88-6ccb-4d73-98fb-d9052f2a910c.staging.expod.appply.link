```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, Button, Image, SafeAreaView } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';
import * as Location from 'expo-location';
import axios from 'axios';

const API_URL = 'https://apihub.staging.appply.link/chatgpt';

const App = () => {
  const [destination, setDestination] = useState('');
  const [currentLocation, setCurrentLocation] = useState(null);
  const [route, setRoute] = useState(null);
  const [mapRegion, setMapRegion] = useState(null);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        console.error('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setCurrentLocation(location.coords);
      setMapRegion({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      });
    })();
  }, []);

  const handleDestinationChange = (text) => {
    setDestination(text);
  };

  const handleBookRide = async () => {
    if (!destination || !currentLocation) return;

    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "You are a helpful assistant that provides route information." },
          { role: "user", content: `Give me a route from ${currentLocation.latitude},${currentLocation.longitude} to ${destination} in the format of an array of [latitude, longitude] pairs.` }
        ],
        model: "gpt-4o"
      });

      const routeData = JSON.parse(response.data.response);
      setRoute(routeData);

      // Update map region to fit the route
      const latitudes = routeData.map(coord => coord[0]);
      const longitudes = routeData.map(coord => coord[1]);
      const minLat = Math.min(...latitudes);
      const maxLat = Math.max(...latitudes);
      const minLng = Math.min(...longitudes);
      const maxLng = Math.max(...longitudes);

      setMapRegion({
        latitude: (minLat + maxLat) / 2,
        longitude: (minLng + maxLng) / 2,
        latitudeDelta: (maxLat - minLat) * 1.5,
        longitudeDelta: (maxLng - minLng) * 1.5,
      });
    } catch (error) {
      console.error('Error fetching route:', error);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <TextInput
          style={styles.input}
          placeholder="Enter destination address"
          value={destination}
          onChangeText={handleDestinationChange}
        />
        <Button title="BOOK RIDE" onPress={handleBookRide} />
        {mapRegion && (
          <MapView style={styles.map} region={mapRegion}>
            {currentLocation && (
              <Marker
                coordinate={{
                  latitude: currentLocation.latitude,
                  longitude: currentLocation.longitude,
                }}
                title="Your Location"
              >
                <Image
                  source={{ uri: 'https://picsum.photos/50/50' }}
                  style={styles.markerImage}
                />
              </Marker>
            )}
            {route && (
              <>
                <Marker
                  coordinate={{
                    latitude: route[route.length - 1][0],
                    longitude: route[route.length - 1][1],
                  }}
                  title="Destination"
                >
                  <Image
                    source={{ uri: 'https://picsum.photos/50/50' }}
                    style={styles.markerImage}
                  />
                </Marker>
                <Polyline
                  coordinates={route.map(coord => ({
                    latitude: coord[0],
                    longitude: coord[1],
                  }))}
                  strokeColor="#000"
                  strokeWidth={3}
                />
              </>
            )}
          </MapView>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#fff',
  },
  container: {
    flex: 1,
    padding: 20,
    marginTop: 20, // Added margin from top
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  map: {
    flex: 1,
    marginTop: 20,
  },
  markerImage: {
    width: 30,
    height: 30,
    borderRadius: 15,
  },
});

export default App;
// End of App.js
```